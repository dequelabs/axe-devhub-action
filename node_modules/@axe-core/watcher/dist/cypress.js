"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapCy = exports.WRAPPED_METHODS = exports.cypressConfig = void 0;
var uuid_1 = require("uuid");
var util_1 = require("./util");
/**
 * Create a Cypress config that uses the axe Watcher extension.
 *
 * @param config Cypress config to extend
 */
var cypressConfig = function (config) {
    var axe = config.axe, userConfig = __rest(config, ["axe"]);
    (0, util_1.writeVariables)(__assign(__assign({}, axe), { 
        // Ensure the session ID persists between tabs.
        // We cannot allow the extension to generate an ID, as each tab would get its own.
        sessionId: axe.sessionId || (0, uuid_1.v4)(), 
        // Let the extension know to check for Cypress frames.
        cypress: true }));
    (0, util_1.writeManifest)({
        all_frames: true,
        exclude_globs: [
            // Top-level Cypress page.
            '*/__/#/specs/runner?file=*',
            // Cypress-specific iframes.
            '*/__cypress/iframes/*'
        ]
    });
    return __assign(__assign({}, userConfig), { e2e: __assign(__assign({}, userConfig.e2e), { setupNodeEvents: function (on) {
                var _a, _b;
                var args = [];
                for (var _i = 1; _i < arguments.length; _i++) {
                    args[_i - 1] = arguments[_i];
                }
                (_b = (_a = userConfig.e2e) === null || _a === void 0 ? void 0 : _a.setupNodeEvents) === null || _b === void 0 ? void 0 : _b.call.apply(_b, __spreadArray([_a, on], args, false));
                on('before:browser:launch', function (browser, launchOptions) {
                    var _a;
                    // We only support Chrome.
                    if (browser.name === 'chrome') {
                        if (browser.isHeadless) {
                            throw new util_1.HeadlessNotSupportedError();
                        }
                        // Load the extension.
                        (_a = launchOptions.args).push.apply(_a, util_1.extensionArgs);
                    }
                    return launchOptions;
                });
            } }) });
};
exports.cypressConfig = cypressConfig;
/** Methods we wrap on the provided `cy` instance. */
exports.WRAPPED_METHODS = [
    'blur',
    'check',
    'clear',
    'click',
    'dblclick',
    'focus',
    'get',
    'go',
    'invoke',
    'reload',
    'scrollIntoView',
    'scrollTo',
    'select',
    'submit',
    'trigger',
    'type',
    'uncheck',
    'visit',
    'wait'
];
/** Wrap the given Cypress `cy` object, ensuring axe-core analysis is run after each command. */
var wrapCy = function (cy) {
    // We cannot wrap the `cy` instance itself, but instead, wrap its prototype.
    // We don't have access to the $Chainer prototype, so use the returned value from `cy.wrap('')`.
    var proto = Object.getPrototypeOf(cy.wrap(''));
    var _loop_1 = function (method) {
        var old = proto[method];
        proto[method] = function () {
            var _this = this;
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            return old.apply(this, params).then(function ($element) {
                return _this.axeAnalyze({ __UserRequestedAnalyze: false }).then(function () { return $element; });
            });
        };
    };
    for (var _i = 0, WRAPPED_METHODS_1 = exports.WRAPPED_METHODS; _i < WRAPPED_METHODS_1.length; _i++) {
        var method = WRAPPED_METHODS_1[_i];
        _loop_1(method);
    }
    return cy;
};
exports.wrapCy = wrapCy;
//# sourceMappingURL=cypress.js.map