export declare const PATH_TO_EXTENSION: string;
export declare const DEFAULT_SERVER_URL = "https://axe.deque.com/";
export declare const PATH_TO_SESSION_FILE: string;
export declare const PATH_TO_EXTENSION_VARIABLES: string;
export declare const extensionArgs: readonly [`--disable-extensions-except=${string}`, `--load-extension=${string}`];
export declare class HeadlessNotSupportedError extends Error {
    name: string;
    constructor();
}
interface AxeConfiguration {
    /** Your axe API key. */
    apiKey: string;
    /** Custom axe server URL. */
    serverURL?: string;
    /** Your session ID. */
    sessionId?: string;
    /** Whether to take and send screenshots to the perf endpoint */
    takeScreenshots?: boolean;
    /**
     * Whether or not to automatically run axe on the page when loaded and
     * when changes are made.
     */
    autoAnalyze?: boolean;
    /** Should the API key be validated before use? Default `true`. */
    validateApiKey?: boolean;
}
export interface Configuration {
    axe: AxeConfiguration;
}
interface WriteVariablesParams extends AxeConfiguration {
    cypress?: boolean;
}
/** variables.json shape. */
export interface Variables {
    api_key: string;
    server_url: string;
    auto_analyze: boolean;
    session_id?: string;
    cypress: boolean;
    take_screenshots?: boolean;
    git_branch?: string | null;
    git_default_branch?: string | null;
    git_commit_message?: string | null;
    git_commit_sha?: string | null;
    git_commit_author?: string | null;
    git_commit_email?: string | null;
    git_url?: string | null;
    git_is_dirty?: boolean;
}
/** Write the user's settings to the disk, so the extension can load them. */
export declare function writeVariables({ apiKey, serverURL, sessionId, autoAnalyze, cypress, takeScreenshots, validateApiKey: shouldValidateApiKey }: WriteVariablesParams): void;
interface WriteManifestParams {
    all_frames: boolean;
    exclude_globs: string[];
}
/** Update the extension manifest file. */
export declare function writeManifest({ all_frames, exclude_globs }: WriteManifestParams): void;
export {};
