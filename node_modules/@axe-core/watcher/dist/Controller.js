"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs_1 = __importDefault(require("fs"));
var util_1 = require("./util");
var updateAutoAnalyze = function (val) {
    var fileContents = fs_1.default.readFileSync(util_1.PATH_TO_EXTENSION_VARIABLES, 'utf-8');
    var jsonValue = JSON.parse(fileContents);
    jsonValue.auto_analyze = val;
    fs_1.default.writeFileSync(util_1.PATH_TO_EXTENSION_VARIABLES, JSON.stringify(jsonValue));
};
var Controller = /** @class */ (function () {
    function Controller() {
        this.isStopped = false;
    }
    Controller.prototype.start = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateAutoAnalyze(true);
                        this.isStopped = false;
                        return [4 /*yield*/, this.executeScript(function () {
                                return new Promise(function (resolve) {
                                    var event = new CustomEvent('axe:start-auto-mode');
                                    var fn = function () {
                                        window.removeEventListener('axe:start-auto-mode-done', fn);
                                        resolve();
                                    };
                                    window.addEventListener('axe:start-auto-mode-done', fn);
                                    window.dispatchEvent(event);
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Controller.prototype.stop = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        updateAutoAnalyze(false);
                        this.isStopped = true;
                        return [4 /*yield*/, this.executeScript(function () {
                                return new Promise(function (resolve) {
                                    var event = new CustomEvent('axe:stop-auto-mode');
                                    var fn = function () {
                                        window.removeEventListener('axe:stop-auto-mode-done', fn);
                                        resolve();
                                    };
                                    window.addEventListener('axe:stop-auto-mode-done', fn);
                                    window.dispatchEvent(event);
                                });
                            })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    Controller.prototype.analyze = function (_a) {
        var _b = _a === void 0 ? {} : _a, _c = _b.__UserRequestedAnalyze, __UserRequestedAnalyze = _c === void 0 ? true : _c;
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        // If the user didn't request an analyze, and we're in manual mode, don't do anything.
                        if (this.isStopped && !__UserRequestedAnalyze) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.executeScript(function (userRequestedAnalyze) {
                                return new Promise(function (resolve) {
                                    var event = new CustomEvent('axe:manual-mode-analyze', {
                                        detail: { userRequestedAnalyze: userRequestedAnalyze }
                                    });
                                    var fn = function () {
                                        window.removeEventListener('axe:manual-mode-analyze-done', fn);
                                        resolve();
                                    };
                                    window.addEventListener('axe:manual-mode-analyze-done', fn);
                                    window.dispatchEvent(event);
                                });
                            }, __UserRequestedAnalyze)];
                    case 1:
                        _d.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    /** Flush all axe-core results by sending them to the server. */
    Controller.prototype.flush = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.executeScript(function () {
                            return new Promise(function (resolve) {
                                var fn = function () {
                                    window.removeEventListener('axe:flush-end', fn);
                                    resolve();
                                };
                                window.addEventListener('axe:flush-end', fn);
                                var event = new CustomEvent('axe:flush-start');
                                window.dispatchEvent(event);
                            });
                        })];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return Controller;
}());
exports.default = Controller;
//# sourceMappingURL=Controller.js.map