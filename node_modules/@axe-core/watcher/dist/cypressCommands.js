"use strict";
/* istanbul ignore file: This file is basically untestable due to how Cypress works. Instead, it's covered by our E2E suite and manual testing. */
Object.defineProperty(exports, "__esModule", { value: true });
/**
 * Has the user stopped automatic mode.
 *
 * This code runs in the Cypress browser, so we're unable to
 * read `variables.json` like we do with other integrations.
 * As result, we need this top-level state for managing
 * analyze calls created by "wrapped" methods.
 */
var isStopped = false;
Cypress.Commands.add('axeFlush', function () {
    cy.window().then(function (win) {
        return new Promise(function (resolve) {
            var fn = function () {
                win.removeEventListener('axe:flush-end', fn);
                resolve();
            };
            win.addEventListener('axe:flush-end', fn);
            var event = new CustomEvent('axe:flush-start');
            win.dispatchEvent(event);
        });
    });
});
Cypress.Commands.add('axeAnalyze', 
// __UserRequestedAnalyze allows us to differentiate between user-initiated and automatic analysis.
function (_a) {
    var _b = _a === void 0 ? {} : _a, _c = _b.__UserRequestedAnalyze, __UserRequestedAnalyze = _c === void 0 ? true : _c;
    if (!__UserRequestedAnalyze && isStopped) {
        return;
    }
    cy.window().then(function (win) {
        return new Promise(function (resolve) {
            var event = new CustomEvent('axe:manual-mode-analyze', {
                detail: { userRequestedAnalyze: __UserRequestedAnalyze }
            });
            var fn = function () {
                win.removeEventListener('axe:manual-mode-analyze-done', fn);
                resolve();
            };
            win.addEventListener('axe:manual-mode-analyze-done', fn);
            win.dispatchEvent(event);
        });
    });
});
Cypress.Commands.add('axeStart', function () {
    cy.window().then(function (win) {
        return new Promise(function (resolve) {
            var event = new CustomEvent('axe:start-auto-mode');
            var fn = function () {
                isStopped = false;
                win.removeEventListener('axe:start-auto-mode-done', fn);
                resolve();
            };
            win.addEventListener('axe:start-auto-mode-done', fn);
            win.dispatchEvent(event);
        });
    });
});
Cypress.Commands.add('axeStop', function () {
    cy.window().then(function (win) {
        return new Promise(function (resolve) {
            var event = new CustomEvent('axe:stop-auto-mode');
            var fn = function () {
                isStopped = true;
                win.removeEventListener('axe:stop-auto-mode-done', fn);
                resolve();
            };
            win.addEventListener('axe:stop-auto-mode-done', fn);
            win.dispatchEvent(event);
        });
    });
});
//# sourceMappingURL=cypressCommands.js.map