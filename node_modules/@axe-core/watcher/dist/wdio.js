"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __rest = (this && this.__rest) || function (s, e) {
    var t = {};
    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
        t[p] = s[p];
    if (s != null && typeof Object.getOwnPropertySymbols === "function")
        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                t[p[i]] = s[p[i]];
        }
    return t;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.wrapWdio = exports.WRAPPED_ELEMENT_METHODS = exports.WRAPPED_BROWSER_METHODS = exports.WdioController = exports.wdioTestRunner = exports.wdioConfig = void 0;
var uuid_1 = require("uuid");
var fs_1 = __importDefault(require("fs"));
var util_1 = require("./util");
var Controller_1 = __importDefault(require("./Controller"));
var noop = function () {
    // Nothing.
};
/**
 * Creates a WebDriverIO config that uses axe extension
 *
 * @param arg Config to extend
 */
function wdioConfig(_a) {
    var _b;
    var axe = _a.axe, options = __rest(_a, ["axe"]);
    (0, util_1.writeVariables)(__assign(__assign({}, axe), { 
        // Ensure the session ID persists between browsers, as
        // WDIO creates a new instance for each test.
        sessionId: axe.sessionId || (0, uuid_1.v4)() }));
    // Disable eslint. Wdio doesn't export this property even though they support it.
    /* eslint-disable @typescript-eslint/no-explicit-any */
    var chromeOpts = ((_b = options.capabilities) === null || _b === void 0 ? void 0 : _b['goog:chromeOptions']) || {};
    var args = chromeOpts.args || [];
    if (args.includes('--headless')) {
        throw new util_1.HeadlessNotSupportedError();
    }
    return __assign(__assign({}, options), { capabilities: __assign(__assign({}, options === null || options === void 0 ? void 0 : options.capabilities), { browserName: 'chrome', 'goog:chromeOptions': {
                args: util_1.extensionArgs.concat(args)
            } }) });
}
exports.wdioConfig = wdioConfig;
// Configuration.axe is not a namespace, therefore have to use ['axe'] instead of .axe
function wdioTestRunner(axe, config) {
    (0, util_1.writeVariables)(axe);
    var capabilities = config.capabilities || [
        {
            'goog:chromeOptions': {
                args: []
            }
        }
    ];
    // has to be any because type is not exported
    var firstCapability = capabilities[0];
    firstCapability['goog:chromeOptions'] =
        firstCapability['goog:chromeOptions'] || {};
    var chromeOpts = firstCapability['goog:chromeOptions'];
    chromeOpts.args = chromeOpts.args || [];
    var args = chromeOpts.args;
    if (args.includes('--headless')) {
        throw new util_1.HeadlessNotSupportedError();
    }
    chromeOpts.args = util_1.extensionArgs.concat(args);
    var _a = config.onPrepare, onPrepare = _a === void 0 ? noop : _a, _b = config.onComplete, onComplete = _b === void 0 ? noop : _b;
    return __assign(__assign({}, config), { capabilities: capabilities, 
        // Write a static/persistent session to disk so that each worker uses the same session ID.
        onPrepare: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            var sessionId = axe.sessionId || (0, uuid_1.v4)();
            fs_1.default.writeFileSync(util_1.PATH_TO_SESSION_FILE, JSON.stringify({ id: sessionId }));
            // @ts-expect-error TS is angry about calling this ¯\_(ツ)_/¯
            return onPrepare.apply(void 0, params);
        }, 
        // Remove the file, preventing other sessions from reusing its ID.
        onComplete: function () {
            var params = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                params[_i] = arguments[_i];
            }
            try {
                fs_1.default.unlinkSync(util_1.PATH_TO_SESSION_FILE);
            }
            catch (_a) {
                // Oh well.
            }
            // @ts-expect-error TS is angry about calling this ¯\_(ツ)_/¯
            return onComplete.apply(void 0, params);
        } });
}
exports.wdioTestRunner = wdioTestRunner;
var WdioController = /** @class */ (function (_super) {
    __extends(WdioController, _super);
    function WdioController(driver) {
        var _this = _super.call(this) || this;
        _this.driver = driver;
        return _this;
    }
    WdioController.prototype.executeScript = function (fn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(this, void 0, void 0, function () {
            var script;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        script = "\n      const callback = arguments[arguments.length - 1];\n      Promise.resolve(...arguments)\n        .then(".concat(fn, ")\n        .then(callback);\n    ");
                        return [4 /*yield*/, this.driver.executeAsync(script, args)];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    return WdioController;
}(Controller_1.default));
exports.WdioController = WdioController;
/** Webdriver `browser` methods. */
exports.WRAPPED_BROWSER_METHODS = [
    'reloadSession',
    'setWindowSize',
    'switchWindow',
    'touchAction',
    'newWindow',
    'pause',
    'url',
    'waitUntil'
];
/** Wrapped `element` methods. */
exports.WRAPPED_ELEMENT_METHODS = [
    'addValue',
    'clearValue',
    'click',
    'doubleClick',
    'dragAndDrop',
    'moveTo',
    'scrollIntoView',
    'setValue',
    'touchAction',
    'waitForClickable',
    'waitForDisplayed',
    'waitForEnabled',
    'waitForExist',
    'waitUntil'
];
/** Wrap the given WDIO `browser` object, ensuring axe-core analysis is run after each command. */
var wrapWdio = function (browser, controller) {
    var wrapper = function (fn) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        return __awaiter(void 0, void 0, void 0, function () {
            var res;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fn.apply(void 0, args)];
                    case 1:
                        res = _a.sent();
                        return [4 /*yield*/, controller.analyze({ __UserRequestedAnalyze: false })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/, res];
                }
            });
        });
    };
    for (var _i = 0, WRAPPED_BROWSER_METHODS_1 = exports.WRAPPED_BROWSER_METHODS; _i < WRAPPED_BROWSER_METHODS_1.length; _i++) {
        var method = WRAPPED_BROWSER_METHODS_1[_i];
        browser.overwriteCommand(method, wrapper);
    }
    for (var _a = 0, WRAPPED_ELEMENT_METHODS_1 = exports.WRAPPED_ELEMENT_METHODS; _a < WRAPPED_ELEMENT_METHODS_1.length; _a++) {
        var method = WRAPPED_ELEMENT_METHODS_1[_a];
        browser.overwriteCommand(method, wrapper, true);
    }
    return browser;
};
exports.wrapWdio = wrapWdio;
//# sourceMappingURL=wdio.js.map